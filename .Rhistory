genexpr_km_fit[[1]]$cluster
#sort(genexpr_km_fit[[2]]$cluster)
#genexpr_km_fit[[2]]$centers
Kmax = 15
#store with-cluster variation
SS_W = numeric(Kmax)
genexpr_km_fit  = list()
for(K in 1:Kmax){
genexpr_km_fit[[K]] = kmeans(genexpr_data,K,iter.max = 50,nstart=20)
SS_W[K] = genexpr_km_fit[[K]]$tot.withinss
}
plot(1:Kmax,SS_W, type="l",xlab="K",ylab = "SS_W")
genexpr_km_fit[[3]]$cluster
#sort(genexpr_km_fit[[2]]$cluster)
#genexpr_km_fit[[2]]$centers
Kmax = 15
#store with-cluster variation
SS_W = numeric(Kmax)
genexpr_km_fit  = list()
for(K in 1:Kmax){
genexpr_km_fit[[K]] = kmeans(genexpr_data,K,iter.max = 50,nstart=20)
SS_W[K] = genexpr_km_fit[[K]]$tot.withinss
}
plot(1:Kmax,SS_W, type="l",xlab="K",ylab = "SS_W")
genexpr_km_fit[[4]]$cluster
#sort(genexpr_km_fit[[2]]$cluster)
#genexpr_km_fit[[2]]$centers
Kmax = 15
#store with-cluster variation
SS_W = numeric(Kmax)
genexpr_km_fit  = list()
for(K in 1:Kmax){
genexpr_km_fit[[K]] = kmeans(genexpr_data,K,iter.max = 50,nstart=20)
SS_W[K] = genexpr_km_fit[[K]]$tot.withinss
}
plot(1:Kmax,SS_W, type="l",xlab="K",ylab = "SS_W")
genexpr_km_fit[[2]]$cluster
#sort(genexpr_km_fit[[2]]$cluster)
#genexpr_km_fit[[2]]$centers
Kmax = 15
#store with-cluster variation
SS_W = numeric(Kmax)
genexpr_km_fit  = list()
for(K in 1:Kmax){
genexpr_km_fit[[K]] = kmeans(genexpr_data,K,iter.max = 50,nstart=20)
SS_W[K] = genexpr_km_fit[[K]]$tot.withinss
}
plot(1:Kmax,SS_W, type="l",xlab="Number of Clusters K",ylab = "Total within-clusters sum of squares")
#genexpr_km_fit[[2]]$cluster
#sort(genexpr_km_fit[[2]]$cluster)
#genexpr_km_fit[[2]]$centers
sort(genexpr_km_fit[[2]]$cluster)
View(genexpr_data)
sort(genexpr_km_fit[[2]]$cluster)
sort(genexpr_km_fit[[2]]$centers
sort(genexpr_km_fit[[2]]$cluster)
genexpr_km_fit[[2]]$centers
sort(genexpr_km_fit[[2]]$cluster)
aggregate(genexpr_data, by=list(genexpr_km_fit[[2]]$cluster),mean)
sort(genexpr_km_fit[[2]]$cluster)
genexpr_pca = prcomp(x=genexpr_data)
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
genexpr_pca = prcomp(x=genexpr_data)
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
genexpr_pca = prcomp(x=genexpr_data)
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
genexpr_pca = prcomp(x=genexpr_data)
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
genexpr_km = kmeans(genexpr_data,4,iter.max = 50,nstart = 20)
#Perform the PCA
genexpr_pca = prcomp(x=genexpr_data)
#Plot the first PC against the second PC
plot(genexpr_pca$x[,1],genexpr_pca$x[,2], xlab = "First PC", ylab = "Second PC", col=genexpr_km$cluster, pch=genexpr_km$cluster)
text(genexpr_pca$x[,1],genexpr_pca$x[,2],labels = rownames(genexpr_data),cex=0.5,pos=3,col = "darkgrey")
setwd("~/RWorkSpace")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(nclSLR)
#load data
data(diabetese)
library(nclSLR)
#load data
data(diabetes)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
training_data = diabetes[1:350]
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
training_data = diabetes[1:320,]
dim(training_data)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
training_data = diabetes[1:320,]
dim(training_data)
test_data = diabetes[321:442,]
dim(training_data)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
training_data = diabetes[1:320,]
dim(training_data)
test_data = diabetes[321:442,]
dim(test_data)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
training_data = diabetes[1:350,]
dim(training_data)
test_data = diabetes[351:442,]
dim(test_data)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
#split data set into test and training data
diab_training_data = diabetes[1:350,]
dim(diab_training_data)
diab_test_data = diabetes[351:442,]
dim(diab_test_data)
library(nclSLR)
#load data
data(diabetes)
#check dimesions
dim(diabetes)
#split data set into test and training data
diab_training_data = diabetes[1:350,]
dim(diab_training_data)
diab_test_data = diabetes[351:442,]
dim(diab_test_data)
head(diab_training_data)
head(diab_training_data)
diab_training_data[,1]
#view first few elements of the trainig set
head(diab_training_data)
#fit model using least squares to the training data
diab_training_lsq_fit = lm(dis ~.,data = diab_training_data)
#view first few elements of the trainig set
head(diab_training_data)
#fit model using least squares to the training data
diab_training_lsq_fit = lm(dis ~.,data = diab_training_data)
summary(diab_training_lsq_fit)
#view first few elements of the trainig set
head(diab_training_data)
#extract response variable
#diab_training_data_resp = diab_training_data[,]
#fit model using least squares to the training data
#diab_training_lsq_fit = lm(dis ~.,data = diab_training_data)
#summarise fitted model
#summary(diab_training_lsq_fit)
#view first few elements of the trainig set
head(diab_training_data)
#fit model using least squares to the training data with dis as the response variable
diab_training_lsq_fit = lm(dis ~.,data = diab_training_data)
yhat_diab_test_data = predict(diab_training_lsq_fit,diab_test_data)
head(yhat_diab_test_data)
#compute test error
test_error = mean((diab_test_data$dis-yhat_diab_test_data)^2)
test_error
head(diab_test_data)
bss_diab-test_data = diab_training_data[,c()]
head(diab_test_data)
bss_diab-test_data = diab_training_data[,c(1,2,3,4,5,6,9)]
head(diab_test_data)
bss_diab_test_data = diab_training_data[,c(1,2,3,4,5,6,9)]
bss_diab_test_data = diab_training_data[,c(1,2,3,4,5,6,9)]
head(bss_diab_test_data)
#create a dataframe based on 6-predictor model
bss_diab_test_data = diab_training_data[,c(1,2,3,4,5,6,9)]
head(bss_diab_test_data,5)
bss_diab_test_lsq_fit = lm(dis~., data = bss_diab_test_data)
#create a dataframe based on 6-predictor model
bss_diab_test_data = diab_training_data[,c(1,2,3,4,5,6,9,10)]
head(bss_diab_test_data,5)
bss_diab_test_lsq_fit = lm(dis~., data = bss_diab_test_data)
#create a dataframe based on 6-predictor model
bss_diab_test_data = diab_training_data[,c(1,2,3,4,5,6,9,11)]
head(bss_diab_test_data,5)
bss_diab_test_lsq_fit = lm(dis~., data = bss_diab_test_data)
#fit best subset selected model using least squares to the training data
bss_diab_training_lsq_fit = lm(dis~ sex+bmi+map+tc+ldl+ltg, data = diab_training_data)
#compute fitted values for test data
yhat_bss_diab_test_data = predict(bss_diab_training_lsq_fit,diab_test_data)
#fit best subset selected model using least squares to the training data
bss_diab_training_lsq_fit = lm(dis~ sex+bmi+map+tc+ldl+ltg, data = diab_training_data)
#compute fitted values for test data
yhat_bss_diab_test_data = predict(bss_diab_training_lsq_fit,diab_test_data)
#compute test error
test_error = mean((diab_test_data$dis-yhat_bss_diab_test_data)^2)
test_error
#view first few elements of the trainig set
head(diab_training_data,5)
#fit model using least squares to the training data with dis as the response variable
diab_training_lsq_fit = lm(dis ~.,data = diab_training_data)
#compute fitted values for test data
yhat_diab_test_data = predict(diab_training_lsq_fit,diab_test_data)
head(yhat_diab_test_data)
#compute test error
test_error = mean((diab_test_data$dis-yhat_diab_test_data)^2)
test_error
#library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[1,10])
diab_test_response_matrix = diab_training_data[,11]
class(diab_test_response_matrix)
#library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[1,10])
diab_test_response_matrix = diab_training_data[,11]
diab_test_data_matrix
class(diab_test_response_matrix)
#library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[1,10])
diab_test_data_matrix
#library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_data_matrix
class(diab_training_data)
diab_training_data[,11]
diab_test_response_matrix
class(diab_test_response_matrix)
#library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
library(glmnet)
install.packages("glmnet")
library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
training_ridge_fit = glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
training_ridge_cv_fit$lambda.min
library(glmnet)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
training_ridge_cv_fit$lambda.min
plot(training_ridge_cv_fit)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
optimal_cv_lambda = training_ridge_cv_fit$lambda.min
#Draw plot of training MSE as a function of lambda
plot(training_ridge_cv_fit)
coef(training_ridge_cv_fit, s=optimal_cv_lambda)
xx = coef(training_ridge_cv_fit, s=optimal_cv_lambda)
class(xx)
xx
training_ridge_cv_fit$glmnet.fit
summary(training_ridge_cv_fit$glmnet.fit)
#fit best subset selected model using least squares to the training data
bss_diab_training_lsq_fit = lm(dis~ sex,bmi, data = diab_training_data)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
ridge_fit = glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
optimal_cv_lambda = training_ridge_cv_fit$lambda.min
#Draw plot of training MSE as a function of lambda
plot(training_ridge_cv_fit)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
ridge_fit = glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
summary(ridge_fit)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
optimal_cv_lambda = training_ridge_cv_fit$lambda.min
#Draw plot of training MSE as a function of lambda
plot(training_ridge_cv_fit)
#Extract explanitory variables into a matrix
diab_test_data_matrix = as.matrix(diab_training_data[,1:10])
diab_test_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
ridge_fit = glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = grid)
optimal_cv_lambda = training_ridge_cv_fit$lambda.min
#best ridge fit
best_ridge_fit= glmnet(diab_test_data_matrix,diab_test_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
#Draw plot of training MSE as a function of lambda
#plot(training_ridge_cv_fit)
View(best_ridge_fit)
coef(best_ridge_fit)
library(glmnet)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
#Extract explanitory variables into a matrix
diab_training_data_matrix = as.matrix(diab_training_data[,1:10])
diab_training_response= diab_training_data[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
ridge_fit = glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = grid)
#fit ridge regression model for each value of the tuning parameter
training_ridge_cv_fit = cv.glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = grid)
optimal_cv_lambda = training_ridge_cv_fit$lambda.min
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
pred = predict(best_ridge_fit, s=optimal_cv_lambda, xnew=diab_test_data)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
pred = predict(best_ridge_fit, s=optimal_cv_lambda, xnew=diab_test_data)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
pred = predict(best_ridge_fit, s=optimal_cv_lambda, xnew=x)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
pred = predict(best_ridge_fit, s=optimal_cv_lambda, xnew=as.matrix(diab_test_data))
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
pred = predict(best_ridge_fit, s=optimal_cv_lambda, newx=as.matrix(diab_test_data))
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
pred = predict(best_ridge_fit, s=optimal_cv_lambda, newx=diab_test_data)
head(diab_test_data)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:11])
pred = predict(best_ridge_fit, s=optimal_cv_lambda, newx=diab_test_data_matrix)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:11])
pred = predict(best_ridge_fit, newx=diab_test_data_matrix,s=optimal_cv_lambda)
newx=diab_test_data_matrix
diab_test_data_matrix
class(diab_test_data_matrix)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:11])
pred = predict(best_ridge_fit, newx=diab_test_data_matrix, s=optimal_cv_lambda)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:10])
pred = predict(best_ridge_fit, newx=diab_test_data_matrix, s=optimal_cv_lambda)
pred
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:10])
pred = predict(best_ridge_fit, newx=diab_test_data_matrix, s=optimal_cv_lambda)
#test error
ridge_reg_test_error = mean((diab_training_response-pred)^2)
dim(diab_training_data)
length(diab_training_response)
dim(diab_test_data_matrix)
length(pred)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:10])
diab_test_response_matrix = as.matrix(diab_test_data[,11])
pred = predict(best_ridge_fit, newx=diab_test_data_matrix, s=optimal_cv_lambda)
#test error
ridge_reg_test_error = mean((diab_test_response_matrix-pred)^2)
#best ridge fit with optimal lambda
best_ridge_fit= glmnet(diab_training_data_matrix,diab_training_response,alpha=0, standardize = FALSE, lambda = optimal_cv_lambda)
coef(best_ridge_fit)
#convert test data data frame to matrix
diab_test_data_matrix = as.matrix(diab_test_data[,1:10])
diab_test_response_matrix = as.matrix(diab_test_data[,11])
pred = predict(best_ridge_fit, newx=diab_test_data_matrix, s=optimal_cv_lambda)
#test error
ridge_reg_test_error = mean((diab_test_response_matrix-pred)^2)
ridge_reg_test_error
#Extract explanitory variables into a matrix
diab_data_matrix = as.matrix(diabetes[,1:10])
diab_data_response= diabetes[,11]
#specifying grid of values for the tuning parameter
grid = 10^seq(5,-3,length.out = 100)
all_data_ridge_fit = glmnet(diab_data_matrix,diab_data_response,alpha=0, standardize = FALSE, lambda = grid)
#fit ridge regression model for each value of the tuning parameter
all_data_ridge_cv_fit = cv.glmnet(diab_data_matrix,diab_data_response,alpha=0, standardize = FALSE, lambda = grid)
all_data_optimal_cv_lambda = all_data_ridge_cv_fit$lambda.min
10^-3
10^-2
10^-5
